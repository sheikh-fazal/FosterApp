import {
  RHFCheckbox,
  RHFSelect,
  RHFTextField,
} from "@root/components/hook-form";
import RHFDatePicker from "@root/components/hook-form/RHFDatePicker";
import * as Yup from "yup";

export const OFsedFromData = [
  {
    id: 1,
    gridLength: 6,
    otherOptions: {
      label: "Date of incident",
      name: "dateOfIncident",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 2,
    gridLength: 6,
    otherOptions: {
      label: "Location",
      name: "location",
      fullWidth: true,
    },
    component: RHFTextField,
  },
  {
    id: 3,
    gridLength: 6,
    otherOptions: {
      label: "Reason for Notification:",
      name: "reasonForNotification",
      fullWidth: true,
      select: true,
      options: [
        { value: "RequestforSingleData", label: "Request for Single Data" },
      ],
    },
    component: RHFSelect,
  },
  {
    id: 4,
    gridLength: 12,
    otherOptions: {
      label: "Cause of Death (if applicable/known)",
      name: "causeOfDeath",
      multiline: true,
      minRows: 3,
      fullWidth: true,
    },
    component: RHFTextField,
  },
  {
    id: 5,
    gridLength: 6,
    otherOptions: {
      label: "Date of Death",
      name: "dateOfDeath",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 6,
    gridLength: 6,
    otherOptions: {
      label: "Will there be an inquest or Post-mortem?:",
      name: "inquestOrPostMortem",
      fullWidth: true,
      select: true,
      options: [
        { value: "RequestforSingleData", label: "Request for Single Data" },
      ],
    },
    component: RHFSelect,
  },
  {
    id: 7,
    gridLength: 12,
    otherOptions: {
      label: "Names and Job Titles of staff on  Duty:",
      name: "jobTitleOfStaffOnDuty",
      multiline: true,
      minRows: 3,
      fullWidth: true,
    },
    component: RHFTextField,
  },
  {
    id: 8,
    gridLength: 12,
    otherOptions: {
      label: "Names and Job Titles of Witness:",
      name: "jobTitleOfWitness",
      multiline: true,
      minRows: 3,
      fullWidth: true,
    },
    component: RHFTextField,
  },
  {
    id: 9,
    gridLength: 12,
    otherOptions: {
      label:
        "Description of incident. Pleease provide details of the incident: ",
      name: "descriptionOfIncident",
      multiline: true,
      minRows: 3,
      fullWidth: true,
    },
    component: RHFTextField,
  },
  {
    id: 10,
    gridLength: 6,
    otherOptions: {
      label: "Was the GP Called:",
      name: "gpCalled",
      fullWidth: true,
      select: true,
      options: [
        { value: "RequestforSingleData", label: "Request for Single Data" },
      ],
    },
    component: RHFSelect,
  },
  {
    id: 11,
    gridLength: 6,
    otherOptions: {
      label: "Date",
      name: "gpCalledDate",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 12,
    gridLength: 6,
    otherOptions: {
      label: "Was the Emergency Services Called:",
      name: "emergencyServicesCalled",
      fullWidth: true,
      select: true,
      options: [
        { value: "RequestforSingleData", label: "Request for Single Data" },
      ],
    },
    component: RHFSelect,
  },
  {
    id: 13,
    gridLength: 6,
    otherOptions: {
      label: "Date",
      name: "emergencyServicesCalledDate",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 14,
    gridLength: 6,
    otherOptions: {
      label: "Service Name",
      name: "serviceName",
      fullWidth: true,
    },
    component: RHFTextField,
  },
  {
    id: 15,
    gridLength: 6,
    otherOptions: {
      fullWidth: true,
      name: "placingAuthority",
      label: "Placing authority (all events) Person Notified",
    },
    component: RHFCheckbox,
  },
  {
    id: 16,
    gridLength: 6,
    otherOptions: {
      label: "Date",
      name: "secretaryOfStateDate",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 17,
    gridLength: 6,
    otherOptions: {
      fullWidth: true,
      name: "secretaryOfState",
      label: "Secretary of state (an only) Person Notified",
    },
    component: RHFCheckbox,
  },
  {
    id: 18,
    gridLength: 6,
    otherOptions: {
      label: "Date",
      name: "areaAuthorityDate",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 19,
    gridLength: 6,
    otherOptions: {
      fullWidth: true,
      name: "areaAuthority",
      label: "Area Authority (a & f) Person Notified",
    },
    component: RHFCheckbox,
  },
  {
    id: 20,
    gridLength: 6,
    otherOptions: {
      label: "Date",
      name: "healthAuthorityDate",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 21,
    gridLength: 6,
    otherOptions: {
      fullWidth: true,
      name: "healthAuthority",
      label: "Health Authority (a & d) Person Notified",
    },
    component: RHFCheckbox,
  },
  {
    id: 22,
    gridLength: 6,
    otherOptions: {
      label: "Date",
      name: "policePersonNotifiedDate",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 23,
    gridLength: 6,
    otherOptions: {
      fullWidth: true,
      name: "policePersonNotified",
      label: "Police (e & d) Person Notified",
    },
    component: RHFCheckbox,
  },
  {
    id: 24,
    gridLength: 6,
    otherOptions: {
      label: "Date",
      name: "parentsNotifiedDate",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 25,
    gridLength: 6,
    otherOptions: {
      fullWidth: true,
      name: "parentsNotified",
      label: "Have parents been notified (if applicable)?",
    },
    component: RHFCheckbox,
  },
  {
    id: 26,
    gridLength: 6,
    otherOptions: {
      label: "Date",
      name: "inspectorNotifiedDate",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 27,
    gridLength: 6,
    otherOptions: {
      fullWidth: true,
      name: "inspectorNotified",
      label: "Chief inspector person Notified",
    },
    component: RHFCheckbox,
  },
  {
    id: 28,
    gridLength: 6,
    otherOptions: {
      label: "Date",
      name: "trustPersonNotifiedDate",
      fullWidth: true,
    },
    component: RHFDatePicker,
  },
  {
    id: 29,
    gridLength: 6,
    otherOptions: {
      fullWidth: true,
      name: "trustPersonNotified",
      label: "Primary Care Trust Person Notified",
    },
    component: RHFCheckbox,
  },
  {
    id: 30,
    gridLength: 12,
    otherOptions: {
      name: "outcomeOfIncident",
      label: "Outcome of incident",
      multiline: true,
      minRows: 3,
      fullWidth: true,
    },
    component: RHFTextField,
  },
  {
    id: 31,
    otherOptions: {
      name: "actionTakenToPrevent",
      label: "Actions to be taken to Prevent further Occurrence:",
      multiline: true,
      minRows: 3,
      fullWidth: true,
    },
    gridLength: 12,
    component: RHFTextField,
  },
  {
    id: 32,
    otherOptions: {
      name: "additionalInformation",
      label:
        "Use this box if you need more space to provide us with any additional Information. Please use peoples initials only:",
      multiline: true,
      minRows: 3,
      fullWidth: true,
    },
    gridLength: 12,
    component: RHFTextField,
  },
  {
    id: 33,
    otherOptions: {
      name: "detailsOfChildren",
      label:
        "Details of Child(ren) if applicable, Include date of birth and use only initials:",
      multiline: true,
      minRows: 3,
      fullWidth: true,
    },
    gridLength: 12,
    component: RHFTextField,
  },
  {
    id: 34,
    otherOptions: {
      name: "placingAuthorities",
      label: "Placing authority(ies) if applicable:",
      multiline: true,
      minRows: 3,
      fullWidth: true,
    },
    gridLength: 12,
    component: RHFTextField,
  },
  {
    id: 35,
    otherOptions: {
      fullWidth: true,
      name: "closureDate",
      label: "Closure Date",
    },
    gridLength: 6,
    component: RHFDatePicker,
  },
];
export const OFsedValue = {
  dateOfIncident: new Date(),
  location: "",
  reasonForNotification: "",
  causeOfDeath: "",
  jobTitleOfWitness: "",
  dateOfDeath: new Date(),
  inquestOrPostMortem: "",
  jobTitleOfStaffOnDuty: "",
  descriptionOfIncident: "",
  gpCalled: "",
  gpCalledDate: new Date(),
  emergencyServicesCalled: "",
  emergencyServicesCalledDate: new Date(),
  serviceName: "",
  placingAuthority: false,
  secretaryOfStateDate: new Date(),
  secretaryOfState: false,
  areaAuthorityDate: new Date(),
  areaAuthority: false,
  healthAuthorityDate: new Date(),
  healthAuthority: false,
  policePersonNotifiedDate: new Date(),
  policePersonNotified: false,
  parentsNotifiedDate: new Date(),
  parentsNotified: false,
  inspectorNotifiedDate: new Date(),
  inspectorNotified: false,
  trustPersonNotifiedDate: new Date(),
  trustPersonNotified: false,
  outcomeOfIncident: "",
  actionTakenToPrevent: "",
  additionalInformation: "",
  detailsOfChildren: "",
  placingAuthorities: "",
  closureDate: new Date(),
};
export const FormSchema = Yup.object().shape({
  dateOfIncident: Yup.date().required("required"),
  location: Yup.string().required("required"),
  reasonForNotification: Yup.string().required("required"),
  causeOfDeath: Yup.string().required("required"),
  dateOfDeath: Yup.date().required("required"),
  inquestOrPostMortem: Yup.string().required("required"),
  jobTitleOfStaffOnDuty: Yup.string().required("required"),
  descriptionOfIncident: Yup.string().required("required"),
  gpCalled: Yup.string().required("required"),
  jobTitleOfWitness: Yup.string().required("required"),
  gpCalledDate: Yup.date().required("required"),
  emergencyServicesCalled: Yup.string().required("required"),
  emergencyServicesCalledDate: Yup.date().required("required"),
  serviceName: Yup.string().required("required"),
  placingAuthority: Yup.boolean().required("required"),
  secretaryOfStateDate: Yup.date().required("required"),
  secretaryOfState: Yup.boolean().required("required"),
  areaAuthorityDate: Yup.date().required("required"),
  areaAuthority: Yup.boolean().required("required"),
  healthAuthorityDate: Yup.date().required("required"),
  healthAuthority: Yup.boolean().required("required"),
  policePersonNotifiedDate: Yup.date().required("required"),
  policePersonNotified: Yup.boolean().required("required"),
  parentsNotifiedDate: Yup.date().required("required"),
  parentsNotified: Yup.boolean().required("required"),
  inspectorNotifiedDate: Yup.date().required("required"),
  inspectorNotified: Yup.boolean().required("required"),
  trustPersonNotifiedDate: Yup.date().required("required"),
  trustPersonNotified: Yup.boolean().required("required"),
  outcomeOfIncident: Yup.string().required("required"),
  actionTakenToPrevent: Yup.string().required("required"),
  additionalInformation: Yup.string().required("required"),
  detailsOfChildren: Yup.string().required("required"),
  placingAuthorities: Yup.string().required("required"),
  closureDate: Yup.date().required("required"),
});
